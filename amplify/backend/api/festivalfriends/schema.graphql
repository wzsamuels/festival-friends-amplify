type Message @model @auth(rules: [{allow: public}])
{
  id: ID!
  content: String!
  senderID: ID! @index(name: "bySender")
  receiverID: ID! @index(name: "byReceiver")
  conversationID: ID! @index(name: "byConversation")
  sender: UserProfile! @belongsTo(fields: ["senderID"])
  receiver: UserProfile! @belongsTo(fields: ["receiverID"])
  conversation: Conversation! @belongsTo(fields: ["conversationID"])
}

type Festival @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  genre: String!
  image: String!
  location: String!
  startDate: AWSDate!
  endDate: AWSDate!
  type: EventType
  attendees: [EventProfile] @hasMany(fields: ["id"])
}

type UserProfile @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  userID: ID!
  verified: Boolean!
  verifySubmitted: Boolean!
  profileImage: String
  city: String
  state: String
  school: String
  address: String
  address2: String
  phone: String
  username: String
  email: String
  zipcode: String
  attendingEvents: [EventProfile] @hasMany(indexName: "byUserProfile", fields: ["id"])
  friends: [Friendship] @hasMany(indexName: "byUserProfile", fields: ["id"])
  conversations: [Conversation] @hasMany(indexName: "byUserProfile", fields: ["id"])
  sentMessages: [Message] @hasMany(indexName: "bySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "byReceiver", fields: ["id"])
  photos: [Photo] @hasMany(indexName: "byUserProfile", fields: ["id"])
  collegeGroupId: ID @index(name: "byCollegeGroup")
  collegeGroup: CollegeGroup @belongsTo(fields: ["collegeGroupId"])
}

type Photo
@model @auth(rules: [{allow: public}])
{
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  s3Key: String!
  isPrivate: Boolean!
  description: String
  comments: [PhotoComment] @hasMany(indexName: "byPhoto", fields: ["id"])
}

type PhotoComment @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String!
  photoID: ID! @index(name: "byPhoto")
  photo: Photo! @belongsTo(fields: ["photoID"])
}

type Friendship @model @auth(rules: [{allow: public}])
{
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  friendProfileID: ID! @index(name: "byFriend")
  isAccepted: Boolean!
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  friendProfile: UserProfile! @belongsTo(fields: ["friendProfileID"])
}

enum FriendshipStatus {
  REQUESTED
  ACCEPTED
}

enum EventType {
  CONCERT
  FESTIVAL
  SPORT
  BUSINESS
  COLLEGE
  MUSIC
  ALL
}

type EventProfile @model @auth(rules: [{allow: public}])
{
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  eventID: ID! @index(name: "byEvent")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  event: Festival! @belongsTo(fields: ["eventID"])
}

type Conversation @model @auth(rules: [{allow: public}])
{
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  friendProfileID: ID! @index(name: "friendProfile")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  friendProfile: UserProfile! @belongsTo(fields: ["friendProfileID"])
  messages: [Message] @hasMany(indexName: "byConversation", fields: ["id"])
}

type CollegeGroup @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  domain: String!
  webPage: String
  countryCode: String
  members: [UserProfile] @hasMany(indexName: "byCollegeGroup", fields: ["id"])
}