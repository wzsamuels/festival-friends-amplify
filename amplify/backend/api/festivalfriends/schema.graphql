type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  content: String!
  senderID: ID! @index(name: "bySender")
  receiverID: ID! @index(name: "byReceiver")
  conversationID: ID! @index(name: "byConversation")
  sender: UserProfile! @belongsTo(fields: ["senderID"])
  receiver: UserProfile! @belongsTo(fields: ["receiverID"])
  conversation: Conversation! @belongsTo(fields: ["conversationID"])
  unreadMessage: Boolean
}

type EventProfile @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  eventID: ID! @index(name: "byEvent")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  event: Festival! @belongsTo(fields: ["eventID"])
}

type Festival @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  genre: String!
  image: String!
  location: String!
  startDate: AWSDate!
  endDate: AWSDate!
  type: EventType
  tagline: String
  description: String
  url: String
  group: CollegeGroup @belongsTo(fields: ["groupID"])
  groupID: ID @index(name: "byGroup")
  attendees: [EventProfile] @hasMany(fields: ["id"])
  rides: [Ride] @hasMany(fields: ["id"])
}

type UserProfile @model @auth(rules: [{ allow: public }]) {
  id: ID!
  firstName: String
  lastName: String
  verified: Boolean @default(value: "false")
  verifySubmitted: Boolean @default(value: "false")
  profilePhotoID: String
  bannerPhotoID: String
  city: String
  state: String
  school: String
  address: String
  address2: String
  phone: String
  email: String
  zipcode: String
  attendingEvents: [EventProfile] @hasMany(indexName: "byUserProfile", fields: ["id"])
  rides: [RideUser] @hasMany(indexName: "byUserProfile", fields: ["id"])
  friends: [Friendship] @hasMany(indexName: "byUserProfile", fields: ["id"])
  conversations: [Conversation] @hasMany(indexName: "byUserProfile", fields: ["id"])
  sentMessages: [Message] @hasMany(indexName: "bySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "byReceiver", fields: ["id"])
  photos: [Photo] @hasMany(indexName: "byUserProfile", fields: ["id"])
  collegeGroupId: ID @index(name: "byCollegeGroup")
  collegeGroup: CollegeGroup @belongsTo(fields: ["collegeGroupId"])
  privacySettingID: ID
  privacySetting: PrivacySetting @hasOne(fields: ["privacySettingID"])
  socialMedia: [SocialMedia] @hasMany(indexName: "byUserProfile", fields: ["id"])
}

type SocialMedia @model @auth(rules: [{ allow: public}]) {
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  userProfile: UserProfile @belongsTo(fields: ["userProfileID"])
  socialMediaType: SocialMediaType!
  accountURL: String!
}

type PrivacySetting @model @auth(rules: [{ allow: public }]) {
  id: ID!
  city: Boolean @default(value: "true")
  state: Boolean @default(value: "true")
  school: Boolean @default(value: "true")
  email: Boolean @default(value: "true")
  attendingEvents: Boolean @default(value: "true")
  rides: Boolean @default(value: "true")
  friends: Boolean @default(value: "true")
  photos: Boolean @default(value: "true")
}

type Ride @model @auth(rules: [{ allow: public }]) {
  id: ID!
  event: Festival! @belongsTo(fields: ["eventID"])
  eventID: ID! @index(name: "byEvent")
  driver: RideUser @hasOne
  passengers: [RideUser] @hasMany(indexName: "byRide", fields: ["id"])
  maxPassengers: Int!
  departureTime: AWSDateTime!
  startPoint: String!
  endPoint: String!
}

type RideUser @model @auth(rules: [{ allow: public }]) {
  id: ID!
  ride: Ride! @belongsTo(fields: ["rideID"])
  rideID: ID! @index(name: "byRide")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  userProfileID: ID! @index(name: "byUserProfile")
  isDriver: Boolean!
}

type Photo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  userProfile: UserProfile @belongsTo(fields: ["userProfileID"])
  s3Key: String!
  isPrivate: Boolean!
  identityId: String!
  description: String
  comments: [PhotoComment] @hasMany(indexName: "byPhoto", fields: ["id"])
}

type PhotoComment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  content: String!
  photoID: ID! @index(name: "byPhoto")
  photo: Photo! @belongsTo(fields: ["photoID"])
}

type Friendship @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  friendProfileID: ID! @index(name: "byFriend")
  isAccepted: Boolean!
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  friendProfile: UserProfile! @belongsTo(fields: ["friendProfileID"])
}

type Conversation @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userProfileID: ID! @index(name: "byUserProfile")
  friendProfileID: ID! @index(name: "friendProfile")
  userProfile: UserProfile! @belongsTo(fields: ["userProfileID"])
  friendProfile: UserProfile! @belongsTo(fields: ["friendProfileID"])
  messages: [Message] @hasMany(indexName: "byConversation", fields: ["id"])
  unreadMessage: Boolean
}

type CollegeGroup @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  domain: String!
  webPage: String
  countryCode: String
  events: [Festival] @hasMany(indexName: "byGroup", fields: ["id"])
  members: [UserProfile] @hasMany(indexName: "byCollegeGroup", fields: ["id"])
}

type Query {
  findSuggestedFriends(
    school: String
    city: String
    state: String
  ): [UserProfile]
}

enum FriendshipStatus {
  REQUESTED
  ACCEPTED
}

enum EventType {
  CONCERT
  FESTIVAL
  SPORT
  BUSINESS
  COLLEGE
  MUSIC
  ALL
  TRAVEL
}

enum SocialMediaType {
  FACEBOOK,
  TWITTER,
  INSTAGRAM
}